/*global $, document*/

function hexCube(x,y,z) {
  this.x = x;
  this.y = y;
  this.z = z;
  return {x: this.x, y: this.y, z: this.z};
}

map = [];
mapCols = 41;
mapRows = 13;
mapLayers = 3;
var layer = 1;

for (h=1; h<mapLayers; h++) {
  map[h] = [];
  for (let i=1; i<=mapCols; i++) {
    map[h][i] = [];
    for (let j=1; j<=mapRows; j++) {
      if (h==1) {
        map[h][i][j] = { exists: true, height: [0,0,0,0,0,0], cliff: true, terrain: 1, water: false };
      } else {
        map[h][i][j] = { exists: false, height: false, cliff: false, terrain: 0, water: false };
      }
    }
  }
}
// *** These SVG objects should be loaded into a seperate file ...
objs = {
  tree: {
    svg: "<g id='g1788' transform='matrix(0.37577412,0,0,0.37577412,-48.643359,-229.46172)'><path inkscape:connector-curvature='0' d='m 197.83066,754.08404 c 2.46667,1.42667 2.47867,3.736 0.028,5.16133 -2.452,1.424 -6.44,1.424 -8.90666,0 -2.468,-1.42533 -2.48134,-3.73466 -0.0293,-5.16133 2.45067,-1.42267 6.44,-1.42267 8.908,0' style='fill:#7cc629;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path168' /><path inkscape:connector-curvature='0' d='m 263.60133,760.40937 c 2.468,1.42534 2.48,3.73467 0.0293,5.16 -2.45333,1.424 -6.44,1.424 -8.908,0 -2.46667,-1.42533 -2.48133,-3.73466 -0.0293,-5.16 2.45066,-1.424 6.44133,-1.424 8.908,0' style='fill:#7cc629;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path170' /><path id='path174' d='m 268.74219,767.8418 c -5.49917,0 -10.99121,1.21391 -15.17188,3.64258 -5.46107,3.17359 -7.31271,7.6311 -5.61523,11.69726 -9.56716,-3.11448 -20.54824,-4.22261 -31.10547,-3.3125 -11.93471,-5.34425 -29.12767,-4.85788 -40.01953,1.47266 -11.37211,6.60795 -11.73061,17.16613 -1.14649,24.06836 -1.10139,7.9825 3.63365,16.19284 14.20899,22.29882 19.08266,11.01767 49.9118,11.01867 68.86914,0 10.33796,-6.00726 14.99529,-14.05297 14.00781,-21.91406 0.0731,-0.0413 0.15229,-0.0771 0.22461,-0.11914 6.48605,-3.77059 7.89246,-9.35389 4.27539,-13.93945 2.46595,-0.60668 4.77839,-1.48597 6.78516,-2.65235 8.3613,-4.85733 8.31906,-12.73828 -0.0996,-17.5996 -4.208,-2.42867 -9.71373,-3.64258 -15.21289,-3.64258 z' style='fill:#000000;fill-opacity:0.25098039;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' inkscape:connector-curvature='0' /><path inkscape:connector-curvature='0' d='m 250.60933,652.37604 c 0,7.51467 -6.092,13.60534 -13.60667,13.60534 -7.51333,0 -13.60533,-6.09067 -13.60533,-13.60534 0,-7.51466 6.092,-13.60666 13.60533,-13.60666 7.51467,0 13.60667,6.092 13.60667,13.60666' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path186' /><path inkscape:connector-curvature='0' d='m 244.27866,646.61604 c 0.20533,-0.932 0.32133,-1.9 0.32133,-2.89466 0,-7.41734 -6.01466,-13.43067 -13.432,-13.43067 -2.19733,0 -4.26533,0.53733 -6.096,1.472 -3.01733,-4.368 -8.05333,-7.23467 -13.76533,-7.23467 -5.25867,0 -9.94533,2.432 -13.012,6.228 -1.10533,-0.29333 -2.26133,-0.46533 -3.45866,-0.46533 -7.01467,0 -12.76534,5.37867 -13.372,12.236 -3.68667,2.67733 -6.092,7.01067 -6.092,11.91733 0,8.14 6.6,14.74 14.74,14.74 3.51333,0 6.73733,-1.23466 9.27066,-3.288 2.43067,4.796 7.396,8.08934 13.14133,8.08934 5.508,0 10.30267,-3.02667 12.832,-7.50267 1.72134,0.70533 3.60267,1.1 5.57734,1.1 8.14,0 14.73866,-6.6 14.73866,-14.74 0,-2.228 -0.508,-4.332 -1.39333,-6.22667' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path188' /><path inkscape:connector-curvature='0' d='m 245.37599,658.77738 c -1.552,0 -2.99333,0.472 -4.19466,1.276 -2.50934,-2.57734 -6.01067,-4.18134 -9.89067,-4.18134 -5.86133,0 -10.85733,3.656 -12.86533,8.808 -1.82267,0.04 -3.56,0.424 -5.14267,1.104 -2.53333,-2.95733 -6.288,-4.83733 -10.48667,-4.83733 -3.22533,0 -6.18533,1.11467 -8.53466,2.96667 -1.60267,-3.052 -4.79733,-5.136 -8.484,-5.136 -5.292,0 -9.58133,4.29066 -9.58133,9.58266 0,5.292 4.28933,9.58134 9.58133,9.58134 1.216,0 2.37467,-0.236 3.444,-0.648 1.19067,6.42 6.80933,11.28666 13.57466,11.28666 1.93467,0 3.776,-0.40266 5.448,-1.12 2.53334,2.956 6.288,4.836 10.48667,4.836 5.86133,0 10.85867,-3.65733 12.86533,-8.808 6.06934,-0.132 11.176,-4.16666 12.892,-9.70266 0.29467,0.0347 0.584,0.0893 0.888,0.0893 4.16934,0 7.54934,-3.38 7.54934,-7.548 0,-4.16933 -3.38,-7.54933 -7.54934,-7.54933' style='fill:#67a530;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path190' /><path inkscape:connector-curvature='0' d='m 238.54799,629.98404 c -0.33866,0 -0.664,0.0507 -0.98933,0.1 -1.65067,-2.76666 -4.66667,-4.62533 -8.12267,-4.62533 -1.87066,0 -3.608,0.55067 -5.076,1.48667 0.192,-0.908 0.296,-1.84667 0.296,-2.80934 0,-7.45466 -6.04266,-13.49866 -13.49733,-13.49866 -7.008,0 -12.76533,5.33866 -13.432,12.17066 -1.096,-0.44266 -2.29066,-0.692 -3.54666,-0.692 -5.22534,0 -9.46267,4.23734 -9.46267,9.464 0,5.22534 4.23733,9.46267 9.46267,9.46267 0.16933,0 0.33333,-0.016 0.5,-0.0253 -0.12667,0.616 -0.192,1.252 -0.192,1.90533 0,5.22667 4.236,9.464 9.46266,9.464 4.95733,0 9.01733,-3.81333 9.42267,-8.66533 1.06133,0.412 2.212,0.64666 3.41866,0.64666 2.42934,0 4.63734,-0.92266 6.31334,-2.42666 1.67733,1.51466 3.89333,2.444 6.33066,2.444 2.20134,0 4.22,-0.75734 5.82667,-2.01734 0.97333,0.55734 2.084,0.90134 3.28533,0.90134 3.668,0 6.64267,-2.97334 6.64267,-6.64134 0,-3.66933 -2.97467,-6.644 -6.64267,-6.644' style='fill:#86ce26;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path192' /><path inkscape:connector-curvature='0' d='m 232.34533,695.50404 c 0,7.8 -6.32267,14.12267 -14.12267,14.12267 -7.8,0 -14.12267,-6.32267 -14.12267,-14.12267 0,-7.80133 6.32267,-14.124 14.12267,-14.124 7.8,0 14.12267,6.32267 14.12267,14.124' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path194' /><path inkscape:connector-curvature='0' d='m 225.77466,689.52538 c 0.21333,-0.96934 0.33333,-1.972 0.33333,-3.004 0,-7.70134 -6.24266,-13.94267 -13.94133,-13.94267 -2.28133,0 -4.428,0.55867 -6.328,1.528 -3.132,-4.53333 -8.36,-7.51067 -14.288,-7.51067 -5.46,0 -10.32533,2.52667 -13.50666,6.46667 -1.148,-0.30667 -2.348,-0.484 -3.59067,-0.484 -7.28133,0 -13.25067,5.58267 -13.88,12.7 -3.82533,2.78133 -6.324,7.28 -6.324,12.37067 0,8.45066 6.85067,15.3 15.3,15.3 3.648,0 6.99333,-1.28134 9.62267,-3.412 2.524,4.97866 7.67733,8.39733 13.64133,8.39733 5.71733,0 10.69333,-3.14133 13.32,-7.78933 1.78666,0.732 3.73866,1.14266 5.788,1.14266 8.45066,0 15.30133,-6.85066 15.30133,-15.3 0,-2.312 -0.528,-4.49733 -1.448,-6.46266' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path196' /><path inkscape:connector-curvature='0' d='m 200.97333,681.51604 c 0.21333,-0.96933 0.33333,-1.972 0.33333,-3.004 0,-7.70133 -6.24133,-13.94266 -13.94266,-13.94266 -2.28,0 -4.42534,0.55866 -6.32667,1.528 -3.132,-4.53334 -8.36,-7.51067 -14.288,-7.51067 -5.46,0 -10.324,2.52533 -13.50667,6.46533 -1.148,-0.304 -2.34666,-0.48266 -3.59066,-0.48266 -7.28134,0 -13.25067,5.58266 -13.88,12.7 -3.82614,2.78133 -6.3236,7.27866 -6.3236,12.37066 0,8.44934 6.85026,15.3 15.30093,15.3 3.64667,0 6.99333,-1.28133 9.62133,-3.412 2.524,4.97867 7.67867,8.39734 13.64134,8.39734 5.71733,0 10.69466,-3.14267 13.32,-7.788 1.78666,0.73066 3.74,1.14133 5.78933,1.14133 8.44933,0 15.3,-6.85067 15.3,-15.3 0,-2.31333 -0.528,-4.49867 -1.448,-6.46267' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path198' /><path inkscape:connector-curvature='0' d='m 215.99999,697.14804 c -1.832,0 -3.532,0.55467 -4.94666,1.50267 -2.96,-3.036 -7.08934,-4.92933 -11.664,-4.92933 -6.91333,0 -12.80533,4.31066 -15.172,10.38666 -2.15067,0.0467 -4.19867,0.5 -6.06533,1.30267 -2.988,-3.488 -7.416,-5.70533 -12.368,-5.70533 -3.80267,0 -7.292,1.31466 -10.064,3.49733 -1.89067,-3.59733 -5.65867,-6.05467 -10.004,-6.05467 -6.24134,0 -11.3,5.05867 -11.3,11.3 0,6.24134 5.05866,11.3 11.3,11.3 1.432,0 2.79866,-0.27733 4.06,-0.76533 1.404,7.572 8.02933,13.30933 16.008,13.30933 2.28266,0 4.45333,-0.47333 6.42533,-1.32 2.988,3.48667 7.41467,5.704 12.368,5.704 6.912,0 12.804,-4.31333 15.172,-10.38666 7.156,-0.156 13.17866,-4.91467 15.20266,-11.44267 0.348,0.0413 0.688,0.10533 1.048,0.10533 4.916,0 8.90134,-3.98533 8.90134,-8.90266 0,-4.916 -3.98534,-8.90134 -8.90134,-8.90134' style='fill:#67a530;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path200' /><path inkscape:connector-curvature='0' d='m 219.61199,669.57738 c -0.436,0 -0.85333,0.064 -1.27066,0.128 -2.124,-3.55734 -5.99867,-5.94667 -10.44134,-5.94667 -2.404,0 -4.64,0.708 -6.52666,1.91067 0.24666,-1.16534 0.38133,-2.372 0.38133,-3.612 0,-9.58267 -7.768,-17.35067 -17.35066,-17.35067 -9.008,0 -16.408,6.864 -17.26534,15.64667 -1.40933,-0.57067 -2.94533,-0.89067 -4.55866,-0.89067 -6.71867,0 -12.16534,5.44533 -12.16534,12.164 0,6.71867 5.44667,12.16533 12.16534,12.16533 0.216,0 0.42666,-0.0227 0.64133,-0.0333 -0.16267,0.792 -0.248,1.61067 -0.248,2.44933 0,6.71867 5.44667,12.16534 12.16533,12.16534 6.372,0 11.59067,-4.90134 12.112,-11.13867 1.36534,0.52933 2.844,0.832 4.396,0.832 3.12134,0 5.96,-1.18667 8.11334,-3.12 2.15733,1.94667 5.00533,3.14133 8.13999,3.14133 2.828,0 5.424,-0.97333 7.48934,-2.592 1.24933,0.71734 2.67866,1.15867 4.22266,1.15867 4.716,0 8.53867,-3.82267 8.53867,-8.53867 0,-4.716 -3.82267,-8.53866 -8.53867,-8.53866' style='fill:#86ce26;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path202' /><path inkscape:connector-curvature='0' d='m 193.23066,692.08138 c 0,7.8 6.324,14.12266 14.124,14.12266 7.79867,0 14.12133,-6.32266 14.12133,-14.12266 0,-7.8 -6.32266,-14.12267 -14.12133,-14.12267 -7.8,0 -14.124,6.32267 -14.124,14.12267' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path204' /><path inkscape:connector-curvature='0' d='m 199.80266,686.10271 c -0.21466,-0.968 -0.33333,-1.97067 -0.33333,-3.004 0,-7.7 6.24133,-13.94267 13.94133,-13.94267 2.28133,0 4.42667,0.55867 6.328,1.52934 3.132,-4.53467 8.36,-7.51067 14.288,-7.51067 5.45867,0 10.324,2.524 13.50667,6.46533 1.14666,-0.30533 2.34666,-0.484 3.59066,-0.484 7.28134,0 13.25067,5.584 13.88,12.70134 3.82534,2.78133 6.32267,7.27866 6.32267,12.37066 0,8.44934 -6.84933,15.3 -15.29867,15.3 -3.648,0 -6.99466,-1.28133 -9.62266,-3.412 -2.52534,4.97734 -7.67867,8.39734 -13.64134,8.39734 -5.71733,0 -10.69466,-3.14267 -13.32,-7.78934 -1.78666,0.732 -3.74,1.14134 -5.78933,1.14134 -8.44933,0 -15.3,-6.84934 -15.3,-15.29867 0,-2.31467 0.528,-4.49733 1.448,-6.464' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path206' /><path inkscape:connector-curvature='0' d='m 224.60266,678.09338 c -0.21333,-0.968 -0.33333,-1.972 -0.33333,-3.00534 0,-7.69866 6.24266,-13.94133 13.94266,-13.94133 2.28,0 4.42667,0.55733 6.32667,1.52933 3.132,-4.536 8.36,-7.51066 14.28933,-7.51066 5.45867,0 10.324,2.52533 13.50534,6.46533 1.148,-0.30533 2.348,-0.484 3.59066,-0.484 7.28134,0 13.25067,5.58267 13.88134,12.70133 3.82533,2.78134 6.32266,7.27867 6.32266,12.37067 0,8.44933 -6.85066,15.3 -15.3,15.3 -3.648,0 -6.99333,-1.28133 -9.62266,-3.412 -2.524,4.97733 -7.67734,8.396 -13.64134,8.396 -5.71733,0 -10.69333,-3.14133 -13.31866,-7.788 -1.788,0.732 -3.74,1.14267 -5.78934,1.14267 -8.45066,0 -15.3,-6.85067 -15.3,-15.30134 0,-2.312 0.528,-4.49733 1.44667,-6.46266' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path208' /><path inkscape:connector-curvature='0' d='m 209.57733,693.72538 c 1.83066,0 3.532,0.556 4.94666,1.504 2.96,-3.03734 7.088,-4.92934 11.664,-4.92934 6.91334,0 12.80534,4.31067 15.172,10.38667 2.14934,0.0467 4.19734,0.5 6.06534,1.30133 2.988,-3.48666 7.41466,-5.704 12.368,-5.704 3.80266,0 7.292,1.31334 10.064,3.49734 1.89066,-3.59867 5.65733,-6.056 10.004,-6.056 6.24133,0 11.3,5.06 11.3,11.30133 0,6.24 -5.05867,11.29867 -11.3,11.29867 -1.43334,0 -2.8,-0.27734 -4.06134,-0.764 -1.40266,7.572 -8.02933,13.308 -16.00666,13.308 -2.28267,0 -4.45334,-0.472 -6.42534,-1.32 -2.988,3.48666 -7.416,5.704 -12.368,5.704 -6.912,0 -12.80533,-4.312 -15.172,-10.38667 -7.15733,-0.15733 -13.17866,-4.91333 -15.204,-11.44267 -0.34666,0.0413 -0.688,0.10534 -1.04666,0.10534 -4.916,0 -8.90267,-3.98534 -8.90267,-8.90134 0,-4.91733 3.98667,-8.90266 8.90267,-8.90266' style='fill:#67a530;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path210' /><path inkscape:connector-curvature='0' d='m 205.96533,666.15471 c 0.43466,0 0.85333,0.0653 1.27066,0.12933 2.12267,-3.55733 5.99867,-5.94666 10.44134,-5.94666 2.404,0 4.63866,0.70666 6.52666,1.91066 -0.248,-1.16533 -0.38266,-2.37333 -0.38266,-3.612 0,-9.58266 7.768,-17.352 17.352,-17.352 9.00666,0 16.408,6.864 17.26533,15.64667 1.408,-0.56933 2.94533,-0.892 4.55867,-0.892 6.71866,0 12.16533,5.44667 12.16533,12.16533 0,6.71867 -5.44667,12.164 -12.16533,12.164 -0.21734,0 -0.428,-0.02 -0.64134,-0.0307 0.16134,0.79066 0.24667,1.61066 0.24667,2.44933 0,6.71867 -5.44667,12.16533 -12.164,12.16533 -6.37333,0 -11.592,-4.90266 -12.11333,-11.14 -1.364,0.53067 -2.84267,0.832 -4.39467,0.832 -3.12267,0 -5.96,-1.18666 -8.11467,-3.11866 -2.156,1.94666 -5.00533,3.14133 -8.13866,3.14133 -2.828,0 -5.42534,-0.97333 -7.49067,-2.592 -1.24933,0.716 -2.67733,1.15867 -4.22133,1.15867 -4.716,0 -8.54,-3.82267 -8.54,-8.53867 0,-4.71733 3.824,-8.54 8.54,-8.54' style='fill:#86ce26;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path212' /><path inkscape:connector-curvature='0' d='m 218.75999,779.40404 -4.04933,-8.43733 c -1.61733,-3.37067 -3.86667,-6.39867 -6.624,-8.92134 l -3.652,-3.34133 c -0.97733,-0.89467 0.0227,-2.476 1.25067,-1.97467 v 0 c 5.16933,2.108 9.62666,5.652 12.84666,10.21334 l 2.50934,3.55333 -2.28134,8.908' style='fill:#855434;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path214' /><path inkscape:connector-curvature='0' d='m 220.29466,772.80537 -0.12133,0.47334 c 0.004,-0.009 0.009,-0.0187 0.0147,-0.028 0.0267,-0.0547 0.21467,-0.48134 0.33067,-0.716 l 0.52267,-2.03867 -2.50934,-3.55467 c -3.22,-4.56 -7.67733,-8.104 -12.848,-10.212 -1.22666,-0.50133 -2.22666,1.08 -1.24933,1.97467 l 0.32133,0.29467 c 0.0613,0.0147 0.12,0.0133 0.18267,0.0387 5.16933,2.108 9.628,5.65334 12.84667,10.21334 l 2.50933,3.55466' style='fill:#6f4324;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path216' /><path inkscape:connector-curvature='0' d='m 224.62799,782.73337 4.83067,-10.064 c 1.928,-4.01866 4.60933,-7.62933 7.89867,-10.63866 l 4.35466,-3.984 c 1.16534,-1.06667 -0.0267,-2.952 -1.49066,-2.35467 v 0 c -6.16534,2.51333 -11.48134,6.74 -15.32134,12.17867 l -2.99066,4.23866 2.71866,10.624' style='fill:#6f4324;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path218' /><path inkscape:connector-curvature='0' d='m 222.79866,774.86271 0.14533,0.56533 c -0.007,-0.0107 -0.012,-0.0227 -0.0187,-0.0333 -0.032,-0.0653 -0.256,-0.57467 -0.39467,-0.85467 l -0.62133,-2.43067 2.99066,-4.23866 c 3.84,-5.43867 9.156,-9.66534 15.32134,-12.17867 1.464,-0.59733 2.656,1.288 1.49066,2.35467 l -0.384,0.352 c -0.0733,0.0173 -0.14133,0.016 -0.21733,0.0453 -6.164,2.51467 -11.48,6.74133 -15.32,12.18 l -2.992,4.23867' style='fill:#855434;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path220' /><path inkscape:connector-curvature='0' d='m 224.79066,725.68671 2.12667,91.14266 c 0.0627,0.94 -0.36134,1.90267 -1.304,2.65467 -1.95734,1.56533 -5.26267,1.56533 -7.232,0 -0.96134,-0.76133 -1.39067,-1.73867 -1.32267,-2.68933 l 2.29467,-91.12 5.43733,0.012' style='fill:#855434;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path222' /><path inkscape:connector-curvature='0' d='m 226.91733,816.82937 -2.12667,-91.14266 -2.75733,-0.005 v 94.97599 c 1.30666,-0.007 2.60933,-0.396 3.58,-1.17333 0.94266,-0.752 1.36666,-1.71467 1.304,-2.65467' style='fill:#6f4324;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path224' /><path inkscape:connector-curvature='0' d='m 278.92933,738.52804 c 0,5.79733 -4.70134,10.49867 -10.5,10.49867 -5.79867,0 -10.5,-4.70134 -10.5,-10.49867 0,-5.8 4.70133,-10.5 10.5,-10.5 5.79866,0 10.5,4.7 10.5,10.5' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path226' /><path inkscape:connector-curvature='0' d='m 273.65866,726.50538 c 0.21467,-0.97867 0.336,-1.992 0.336,-3.03467 0,-7.77867 -6.30533,-14.08533 -14.084,-14.08533 -2.304,0 -4.472,0.564 -6.392,1.544 -3.164,-4.58 -8.444,-7.58534 -14.43333,-7.58534 -5.51467,0 -10.42934,2.55067 -13.644,6.53067 -1.15867,-0.308 -2.37067,-0.48933 -3.62667,-0.48933 -7.356,0 -13.38533,5.64133 -14.02133,12.82933 -3.86534,2.81067 -6.388,7.35467 -6.388,12.49733 0,8.536 6.92,15.456 15.456,15.456 3.684,0 7.064,-1.29467 9.72,-3.44667 2.55066,5.028 7.756,8.48134 13.78,8.48134 5.776,0 10.80266,-3.17467 13.45466,-7.86667 1.80534,0.73867 3.77734,1.152 5.84934,1.152 8.53466,0 15.45466,-6.91867 15.45466,-15.45466 0,-2.33734 -0.53466,-4.544 -1.46133,-6.528' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path228' /><path inkscape:connector-curvature='0' d='m 273.89599,739.05071 c -1.40266,0 -2.70533,0.42533 -3.78933,1.152 -2.26667,-2.32667 -5.43067,-3.77734 -8.936,-3.77734 -5.29467,0 -9.80933,3.304 -11.62267,7.95734 -1.64666,0.036 -3.216,0.38266 -4.64666,0.99733 -2.28934,-2.67067 -5.68,-4.36933 -9.47467,-4.36933 -2.91333,0 -5.58667,1.00666 -7.71067,2.68 -1.448,-2.75734 -4.33333,-4.64 -7.664,-4.64 -4.78,0 -8.656,3.876 -8.656,8.65733 0,4.78 3.876,8.656 8.656,8.656 1.09867,0 2.144,-0.212 3.112,-0.58533 1.07467,5.80133 6.15067,10.196 12.26267,10.196 1.748,0 3.41067,-0.36267 4.92267,-1.01067 2.28933,2.67067 5.68,4.36933 9.47466,4.36933 5.29467,0 9.80934,-3.304 11.62267,-7.95733 5.48267,-0.12 10.096,-3.76533 11.648,-8.76667 0.26667,0.032 0.52667,0.0813 0.80133,0.0813 3.76667,0 6.82,-3.05334 6.82,-6.82 0,-3.76667 -3.05333,-6.82 -6.82,-6.82' style='fill:#67a530;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path230' /><path inkscape:connector-curvature='0' d='m 269.62133,721.24938 c -0.26134,0 -0.512,0.0387 -0.76267,0.076 -1.27467,-2.13467 -3.60133,-3.57067 -6.268,-3.57067 -1.444,0 -2.78533,0.42533 -3.91867,1.148 0.148,-0.7 0.22934,-1.42533 0.22934,-2.168 0,-5.75333 -4.66267,-10.41733 -10.416,-10.41733 -5.40667,0 -9.85067,4.12133 -10.36534,9.39333 -0.84533,-0.34267 -1.768,-0.53467 -2.736,-0.53467 -4.03333,0 -7.30266,3.26934 -7.30266,7.30134 0,4.03466 3.26933,7.304 7.30266,7.304 0.12934,0 0.256,-0.0133 0.38534,-0.02 -0.0987,0.476 -0.14934,0.96666 -0.14934,1.47066 0,4.03333 3.26934,7.30267 7.30267,7.30267 3.82667,0 6.95867,-2.94267 7.272,-6.68667 0.81867,0.31867 1.70667,0.5 2.63867,0.5 1.87333,0 3.57866,-0.712 4.87066,-1.87466 1.29467,1.16933 3.00534,1.888 4.88667,1.888 1.69733,0 3.256,-0.58534 4.496,-1.556 0.75067,0.42933 1.608,0.69466 2.53467,0.69466 2.83066,0 5.12666,-2.29466 5.12666,-5.12666 0,-2.83067 -2.296,-5.124 -5.12666,-5.124' style='fill:#86ce26;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path232' /><path inkscape:connector-curvature='0' d='m 253.40399,716.94138 c 0,6.54933 -5.30933,11.85866 -11.85733,11.85866 -6.54933,0 -11.85733,-5.30933 -11.85733,-11.85866 0,-6.548 5.308,-11.85734 11.85733,-11.85734 6.548,0 11.85733,5.30934 11.85733,11.85734' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path234' /><path inkscape:connector-curvature='0' d='m 247.88799,711.92138 c 0.17734,-0.812 0.27867,-1.65467 0.27867,-2.52134 0,-6.46533 -5.24133,-11.70533 -11.70533,-11.70533 -1.91467,0 -3.71734,0.468 -5.31334,1.28267 -2.62933,-3.80667 -7.01866,-6.30534 -11.996,-6.30534 -4.584,0 -8.668,2.12 -11.34,5.428 -0.964,-0.256 -1.97066,-0.40533 -3.01466,-0.40533 -6.11333,0 -11.12533,4.68667 -11.65467,10.66267 -3.212,2.336 -5.308,6.112 -5.308,10.38666 0,7.09467 5.75067,12.84534 12.84533,12.84534 3.06267,0 5.872,-1.07467 8.07867,-2.864 2.12,4.17866 6.44667,7.04933 11.45333,7.04933 4.8,0 8.97867,-2.63733 11.184,-6.53867 1.5,0.61467 3.13867,0.95867 4.86,0.95867 7.09467,0 12.84667,-5.752 12.84667,-12.84533 0,-1.94267 -0.444,-3.776 -1.21467,-5.428' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path236' /><path inkscape:connector-curvature='0' d='m 248.84399,722.52138 c -1.35333,0 -2.61066,0.41066 -3.656,1.112 -2.18666,-2.24534 -5.23866,-3.644 -8.62,-3.644 -5.108,0 -9.46266,3.18666 -11.212,7.67466 -1.588,0.0347 -3.10266,0.36934 -4.48266,0.964 -2.208,-2.57733 -5.48,-4.216 -9.14,-4.216 -2.80934,0 -5.38934,0.97067 -7.43734,2.584 -1.39733,-2.65866 -4.18133,-4.47466 -7.39333,-4.47466 -4.612,0 -8.35066,3.73866 -8.35066,8.35066 0,4.612 3.73866,8.35067 8.35066,8.35067 1.06,0 2.06934,-0.20534 3.00134,-0.56534 1.03733,5.59467 5.93333,9.836 11.82933,9.836 1.68666,0 3.292,-0.35066 4.748,-0.976 2.20933,2.576 5.48133,4.216 9.14,4.216 5.10933,0 9.46266,-3.18666 11.212,-7.676 5.28933,-0.116 9.74,-3.632 11.236,-8.45733 0.25733,0.032 0.50933,0.0787 0.77466,0.0787 3.63334,0 6.57867,-2.94533 6.57867,-6.57867 0,-3.63333 -2.94533,-6.57866 -6.57867,-6.57866' style='fill:#67a530;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path238' /><path inkscape:connector-curvature='0' d='m 242.89199,697.42671 c -0.29466,0 -0.57866,0.0453 -0.86133,0.088 -1.44,-2.412 -4.06667,-4.032 -7.07867,-4.032 -1.63066,0 -3.14533,0.48 -4.424,1.296 0.16667,-0.79067 0.25867,-1.608 0.25867,-2.44933 0,-6.496 -5.26667,-11.76267 -11.764,-11.76267 -6.10667,0 -11.12533,4.65333 -11.70533,10.608 -0.956,-0.38667 -1.99734,-0.60533 -3.092,-0.60533 -4.55467,0 -8.24667,3.692 -8.24667,8.24666 0,4.556 3.692,8.248 8.24667,8.248 0.148,0 0.29066,-0.0147 0.436,-0.0213 -0.11067,0.53733 -0.168,1.092 -0.168,1.66 0,4.55467 3.69333,8.248 8.248,8.248 4.32,0 7.85733,-3.32267 8.212,-7.552 0.92533,0.35867 1.92666,0.564 2.97866,0.564 2.11734,0 4.04134,-0.804 5.50134,-2.11467 1.46266,1.32 3.39333,2.12934 5.51866,2.12934 1.91734,0 3.67734,-0.66 5.07734,-1.75734 0.848,0.48667 1.816,0.78667 2.86266,0.78667 3.19734,0 5.78934,-2.592 5.78934,-5.78933 0,-3.19734 -2.592,-5.79067 -5.78934,-5.79067' style='fill:#86ce26;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path240' /><path inkscape:connector-curvature='0' d='m 217.85733,736.07071 c 0,6.548 -5.308,11.85733 -11.85734,11.85733 -6.54933,0 -11.85733,-5.30933 -11.85733,-11.85733 0,-6.54933 5.308,-11.85867 11.85733,-11.85867 6.54934,0 11.85734,5.30934 11.85734,11.85867' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path242' /><path inkscape:connector-curvature='0' d='m 212.34133,731.05071 c 0.17866,-0.81333 0.27866,-1.656 0.27866,-2.52267 0,-6.46533 -5.24,-11.70666 -11.70533,-11.70666 -1.91466,0 -3.71733,0.46933 -5.312,1.284 -2.63066,-3.80667 -7.01866,-6.30534 -11.996,-6.30534 -4.584,0 -8.66933,2.12 -11.34133,5.428 -0.96267,-0.256 -1.97067,-0.40666 -3.01467,-0.40666 -6.11333,0 -11.12533,4.688 -11.65333,10.664 -3.212,2.33466 -5.30933,6.11199 -5.30933,10.38666 0,7.096 5.75066,12.84533 12.84666,12.84533 3.06134,0 5.87067,-1.076 8.07867,-2.864 2.11867,4.17867 6.44667,7.05067 11.45333,7.05067 4.8,0 8.97734,-2.63867 11.18267,-6.54 1.5,0.61467 3.14,0.95867 4.86133,0.95867 7.09467,0 12.84533,-5.75067 12.84533,-12.84667 0,-1.94133 -0.444,-3.776 -1.21466,-5.42533' style='fill:#78c12b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path244' /><path inkscape:connector-curvature='0' d='m 213.29733,741.64937 c -1.35334,0 -2.60934,0.41067 -3.656,1.11067 -2.18667,-2.244 -5.23734,-3.64267 -8.61867,-3.64267 -5.10933,0 -9.464,3.18667 -11.21333,7.676 -1.588,0.0347 -3.10267,0.36934 -4.48133,0.96134 -2.20934,-2.576 -5.48134,-4.21467 -9.14,-4.21467 -2.81067,0 -5.38934,0.97067 -7.43734,2.584 -1.39733,-2.65867 -4.18266,-4.47467 -7.39333,-4.47467 -4.612,0 -8.352,3.73867 -8.352,8.35067 0,4.612 3.74,8.352 8.352,8.352 1.05867,0 2.068,-0.20667 3,-0.56533 1.03733,5.59466 5.93467,9.83466 11.83067,9.83466 1.68666,0 3.29066,-0.34933 4.748,-0.976 2.208,2.57734 5.48,4.216 9.14,4.216 5.108,0 9.46266,-3.18666 11.21199,-7.676 5.28934,-0.116 9.74,-3.632 11.236,-8.456 0.256,0.0293 0.508,0.0773 0.77334,0.0773 3.63333,0 6.57866,-2.94534 6.57866,-6.57867 0,-3.63333 -2.94533,-6.57867 -6.57866,-6.57867' style='fill:#67a530;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path246' /><path inkscape:connector-curvature='0' d='m 205.91866,719.80538 c -0.26667,0 -0.524,0.0413 -0.78133,0.0787 -1.304,-2.18666 -3.68667,-3.65466 -6.41733,-3.65466 -1.47867,0 -2.85334,0.43466 -4.01334,1.17466 0.15334,-0.716 0.236,-1.45866 0.236,-2.22 0,-5.89066 -4.776,-10.66666 -10.66666,-10.66666 -5.53734,0 -10.08667,4.22 -10.61334,9.61866 -0.86666,-0.35066 -1.81066,-0.54933 -2.80266,-0.54933 -4.13067,0 -7.47734,3.348 -7.47734,7.47867 0,4.12933 3.34667,7.47733 7.47734,7.47733 0.13333,0 0.26266,-0.0133 0.39333,-0.0187 -0.0987,0.48667 -0.15067,0.98934 -0.15067,1.50534 0,4.12933 3.348,7.47866 7.47734,7.47866 3.91733,0 7.12533,-3.01467 7.44666,-6.848 0.83867,0.32534 1.748,0.51067 2.70134,0.51067 1.91866,0 3.664,-0.72933 4.988,-1.91733 1.32533,1.19733 3.076,1.932 5.004,1.932 1.73733,0 3.33333,-0.6 4.60399,-1.59467 0.768,0.44133 1.64667,0.71333 2.59467,0.71333 2.89867,0 5.24933,-2.35066 5.24933,-5.24933 0,-2.89867 -2.35066,-5.24933 -5.24933,-5.24933' style='fill:#86ce26;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.13333333' id='path248' /></g>",
    offsetX: 0,
    offsetY: 0,
  },
  road001: {
    svg: "<g id='layerRoad001' transform='translate(-25.318568,-102.73091)'><path id='path4518' style='fill:#3a3b3b;fill-opacity:1;stroke:#000000;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;filter:url(#filterFilmGrain)' d='m 108.31856,173.13091 60,-30 -69.999997,-34 -59.999996,30 z' /></g>",
    offsetX: 0,
    offsetY: 0,
  }
};

if (1==1) {
  map[layer][16][13].water = true; map[layer][16][13].height = [ -128, -240, -240, -240, -240, -240];
  map[layer][16][12].water = true; map[layer][16][12].height = [ -240, -240, -240, -240, -240, -240];
  map[layer][15][12].water = true; map[layer][15][12].height = [ -240, -240, -240, -240, -240, -240];
  map[layer][14][12].water = true; map[layer][14][12].height = [ -240, -240, -240, -240, -240, -240];
  map[layer][15][13].water = true; map[layer][15][13].height = [ -240, -240, -240, -240, -240, -240];
  map[layer][13][12].water = true; map[layer][13][12].height = [ -240, -240, -240, -240, -240, -240];
  map[layer][11][11].water = true; map[layer][11][11].height = [ -240, -240, -240, -240, -240, -240];
  map[layer][12][11].water = true; map[layer][12][11].height = [ -240, -240, -240, -240, -240, -240];
  map[layer][12][10].water = true; map[layer][12][10].height = [ -240, -128, -128, -128, -128, -240];

  map[layer][16][13].terrain = 2;
  map[layer][16][12].terrain = 2;
  map[layer][15][12].terrain = 2;
  map[layer][14][12].terrain = 2;
  map[layer][15][13].terrain = 2;
  map[layer][13][12].terrain = 2;
  map[layer][11][11].terrain = 2;
  map[layer][12][11].terrain = 2;
  map[layer][12][10].terrain = 2;

  map[layer][18][13].height = [ 0, 0, 0, 0, 0, -240];

  map[layer][17][13].height = [ -80, -80, 0, 0, 0, 0];
  map[layer][17][13].terrain = 2;
  //  R   C
  map[layer][15][11].objs = [{ type: 'tree' }];
  map[layer][15][10].objs = [{ type: 'tree' }];
  map[layer][14][11].objs = [{ type: 'tree' }];
  map[layer][14][10].objs = [{ type: 'tree' }];
  map[layer][13][11].objs = [{ type: 'tree' }];
  map[layer][13][10].objs = [{ type: 'tree' }];
  map[layer][13][ 9].objs = [{ type: 'tree' }];
  
  map[layer][19][11].height = [  32, 128,  32, 128,  32,  16];
  map[layer][16][11].height = [   0,   0,   255, 255,  0,   0];
  
  // layer 2
  map[2][18][10] = { exists: true, height: [0,0,0,0,0,0], cliff: true, terrain: 1, water: false };
  map[2][17][11] = { exists: true, height: [0,0,0,0,0,0], cliff: true, terrain: 1, water: false };
  
  // map refactoring from 256 base to 16 base which is the current default height method.
  for (let i=1; i<=mapCols; i++) {
    for (let j=1; j<=mapRows; j++) {
      for (k=0; k<6; k++) {
        // boundery checking.
        map[layer][i][j].height[k] = (map[layer][i][j].height[k]<-255)?-255:(map[layer][i][j].height[k]);
        map[layer][i][j].height[k] = (map[layer][i][j].height[k]>256)?255:(map[layer][i][j].height[k]);
        // fraction converting
        map[layer][i][j].height[k] = (map[layer][i][j].height[k]==0)?0:map[layer][i][j].height[k]/16;
      }
    }
  }
}

isoMapCols = Math.floor(mapCols/4);
isoMapRows = Math.floor(mapRows-1);
isoMap = [];
for (let i=1; i<=isoMapCols; i++) {
  isoMap[i] = [];
  for (let j=1; j<=isoMapRows; j++) {
    isoMap[i][j] = {
      floor: 0,
      wall: [0,0,0,0],
      ceil: 0
    };
  }
}

//     r  c
isoMap[2][10].floor = 1;
isoMap[2][11].floor = 1;
isoMap[2][12].floor = 1;
isoMap[3][10].floor = 1;
isoMap[3][11].floor = 1;
isoMap[3][12].floor = 1;


isoMap[1][3].floor = 2;

isoMap[2][3].floor = 3;
isoMap[3][3].floor = 3;
isoMap[4][3].floor = 3;

isoMap[2][8].floor = 4;
isoMap[3][8].floor = 4;
isoMap[4][8].floor = 4;


var controlX = 400, controlY = 200, controlZ = 300;
var svgParent = document.getElementById('svgParent');

$.fn.hexGridWidget = function (hexRadius, hexHeight, rows, columns, cssClass) {
	'use strict';
	var createSVG = function (tag) {
		return $(document.createElementNS('http://www.w3.org/2000/svg', tag || 'svg'));
	};
  
  let cube_directions = [
    hexCube(+1, -1, 0), hexCube(+1, 0, -1), hexCube(0, +1, -1), 
    hexCube(-1, +1, 0), hexCube(-1, 0, +1), hexCube(0, -1, +1), 
  ];
  
  // svg:   the owning <svg> element
  // id:    an id="..." attribute for the gradient
  // stops: an array of objects with <stop> attributes
  function createGradient(svg,id,stops, gradientTransform){
    var svgNS = svg.namespaceURI;
    var grad  = document.createElementNS(svgNS,'linearGradient');
    grad.setAttribute('id',id);
    grad.setAttribute('gradientTransform',gradientTransform);
    for (let i=0;i<stops.length;i++){
      let attrs = stops[i];
      let stop = document.createElementNS(svgNS,'stop');
      for (let attr in attrs){
        if (attrs.hasOwnProperty(attr)) stop.setAttribute(attr,attrs[attr]);
      }
      grad.appendChild(stop);
    }

    var defs = svg.querySelector('defs') ||
        svg.insertBefore( document.createElementNS(svgNS,'defs'), svg.firstChild);
    return defs.appendChild(grad);
  }
  
  
	return $(this).each(function () {
		var element = $(this),
				hexClick = function () { var hex = $(this); element.trigger($.Event('hexclick', hex.data())); },
        width  = 2 * hexRadius,
        height = Math.sqrt(3) * hexRadius,
				svgParent = createSVG('svg').attr('class', 'svgRender').attr('id', 'svgRender').attr('tabindex', 1).appendTo(element).css({ width: ((12 * columns  +  0.5) * hexRadius) * 2.0,  height: (11.75 * rows  + 0) * hexRadius }),
        //svgParent = document.getElementById('svgParent'),
        offsetwidth = ((2 * columns  +  0.5) * hexRadius) / 1.0,
				row, column, center, oe, isEdge, isoCol, isoRow,
				toPoint = function (dx, dy) { return Math.round(dx + center.x) + ',' + Math.round(dy + center.y); },
        toPointXy = function (dx, dy) { return {x: Math.round(dx), y: Math.round(dy)}; }
        ;
    let p=[], q=[], h=0, n=0, i=0, j=0, hexCenter=0;

    // *** Set up the current viewport
    svgRender.setAttribute("viewBox", controlX + ' ' + controlY + ' ' + controlZ + ' ' + controlZ);
    
    // Main hex drawing area.
    // May need to put this routine and the isometric drawing routines into their own function, copying this 
    
      
    for (column = 1; column <= columns; column++) {
      for (oe=1; oe<=2; oe++) {
        for (row = oe; row <= rows; row+=2) {
          for (h=1; h<mapLayers; h++) {
            center = {
              x: (width * 1.5 * column) + ((row%2==0)?width*0.75:0),
              y: 0.5 * height * row
            };

            isEdge = ( (column==columns && row%2==0)  || row>=rows-1)?true:false;

            var size = new Point(hexRadius, hexRadius);
            p = [];
            // ToDo: Put these angle calculations into a function.
            // ToDo: Put the points into a hex()
            // ╞═ Vector Calculations ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╡
            var start_angle =0, corner, angle = 0;
            corner = 1; angle =  2.0 * Math.PI * (start_angle - corner) / 6.0;
            p[1] = new Point(size.x * Math.cos(angle), (size.y * Math.sin(angle)));

            corner = 2; angle =  2.0 * Math.PI * (start_angle - corner) / 6.0;
            p[2] = new Point(size.x * Math.cos(angle), (size.y * Math.sin(angle)));

            corner = 3; angle =  2.0 * Math.PI * (start_angle - corner) / 6.0;
            p[3] = new Point(size.x * Math.cos(angle), (size.y * Math.sin(angle)));

            corner = 4; angle =  2.0 * Math.PI * (start_angle - corner) / 6.0;
            p[4] = new Point(size.x * Math.cos(angle), (size.y * Math.sin(angle)));

            corner = 5; angle =  2.0 * Math.PI * (start_angle - corner) / 6.0;
            p[5] = new Point(size.x * Math.cos(angle), (size.y * Math.sin(angle)));

            corner = 6; angle =  2.0 * Math.PI * (start_angle - corner) / 6.0;
            p[6] = new Point(size.x * Math.cos(angle), (size.y * Math.sin(angle)));

            for (n=1; n<=6; n++) {
              p[n] = cartesianToIsometric(p[n]);
              p[n].y = p[n].y  - ((h-1)*hexHeight);
            }
            center = cartesianToIsometric(center);
            center.x = center.x + offsetwidth;

            hexCenter = cartesianToIsometric(new Point(width, 0.50 * height));
            hexCenter = (new Point(width, 0.50 * height));
            hexCenter.x = hexCenter.x + center.x;
            hexCenter.y = hexCenter.y + center.y;
            // *** Create svg group for this tile.

            if (map[h][row][column]) {
              let theTile = createSVG('g').attr({
                'class':'hexTile', tabindex:-1
              })
              .attr({'id': 'hexTileC'+column+'R'+row+'L'+h, 'class': 'hexTile' })
              .appendTo(svgParent).data({center:center});

              // ╞═ Tile cliff/sides ═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╡
              if (map[h][row][column].cliff===true) {
                let tmpPtA1 = ((toPointXy(p[3].x + 100, p[3].y - map[h][row][column].height[2] + 100)));
                let tmpPtA2 = ((toPointXy(p[2].x + 100, p[2].y - map[h][row][column].height[1] + 100)));

                let tmpPtB1 = ((toPointXy(p[4].x + 100, p[4].y - map[h][row][column].height[3] + 100)));
                let tmpPtB2 = ((toPointXy(p[3].x + 100, p[3].y - map[h][row][column].height[2] + 100)));

                let tmpPtC1 = ((toPointXy(p[5].x + 100, p[5].y - map[h][row][column].height[4] + 100)));
                let tmpPtC2 = ((toPointXy(p[4].x + 100, p[4].y - map[h][row][column].height[3] + 100)));

                let angA = getAngle(tmpPtA1.x, tmpPtA1.y, tmpPtA2.x, tmpPtA2.y) + 90;
                createGradient($('svg')[0],'gradientDirtA_C'+column+'R'+row+'H'+h,[
                  {offset:'0%', 'stop-color':'#9e6936'},
                  {offset:'100%', 'stop-color':'#633d18'}
                ], "rotate(" + angA + ")");

                let angB = getAngle(tmpPtB1.x, tmpPtB1.y, tmpPtB2.x, tmpPtB2.y) + 90;
                createGradient($('svg')[0],'gradientDirtB_C'+column+'R'+row+'H'+h,[
                  {offset:'0%', 'stop-color':'#9e6936'},
                  {offset:'100%', 'stop-color':'#633d18'}
                ], "rotate(" + angB + ")");

                let angC = getAngle(tmpPtC1.x, tmpPtC1.y, tmpPtC2.x, tmpPtC2.y) + 60;
                createGradient($('svg')[0],'gradientDirtC_C'+column+'R'+row+'H'+h,[
                  {offset:'0%', 'stop-color':'#9e6936'},
                  {offset:'100%', 'stop-color':'#633d18'}
                ], "rotate(" + angC + ")");


                if (map[h][row][column].height!=false) {
                  createSVG('polygon').attr({
                    points: [
                      toPoint(p[1].x, p[1].y    - map[h][row][column].height[0]), toPoint(p[1].x, p[1].y+hexHeight - 0), toPoint(p[6].x, p[6].y+hexHeight - 0), toPoint(p[6].x, p[6].y    - map[h][row][column].height[5])
                    ].join(' '),'class':'hexField', tabindex:-1
                  })
                  .attr({'id': 'hexCliffR'+row+'C'+column, 'class': 'hexCliff', 'fill': 'url(#gradientDirtA_C'+column+'R'+row+'H'+h + ')', 'style': "transform: skewY(0);" })
                  .appendTo(theTile).data({center:center});

                  createSVG('polygon').attr({
                    points: [
                      toPoint(p[6].x, p[6].y    - map[h][row][column].height[5]), toPoint(p[6].x, p[6].y+hexHeight - 0), toPoint(p[5].x, p[5].y+hexHeight - 0), toPoint(p[5].x, p[5].y    - map[h][row][column].height[4]),
                    ].join(' '),'class':'hexField', tabindex: -1
                  })
                  .attr({ 'id': 'hexCliffR'+row+'C'+column, 'class': 'hexCliff', 'fill': 'url(#gradientDirtB_C'+column+'R'+row+'H'+h + ')', 'style': "transform: skewY(0);" })
                  .appendTo(theTile).data({center:center});

                  createSVG('polygon').attr({
                    points: [
                      toPoint(p[5].x, p[5].y    - map[h][row][column].height[4]), toPoint(p[5].x, p[5].y+hexHeight - 0), toPoint(p[4].x, p[4].y+hexHeight - 0), toPoint(p[4].x, p[4].y    - map[h][row][column].height[3]),
                    ].join(' '),'class': 'hexField', tabindex: -1
                  })
                  .attr({ 'id': 'hexCliffR'+row+'C'+column, 'class': 'hexCliff', 'fill': 'url(#gradientDirtC_C'+column+'R'+row+'H'+h + ')', 'style': "transform: skewY(0);" })
                  .appendTo(theTile).data({center:center});
                }
              }

              map[h][row][column].start  = center;
              map[h][row][column].center = hexCenter;
              map[h][row][column].points = p;
              map[h][row][column].row    = row;
              map[h][row][column].column = column;
              // ╞═ Tile ═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╡
              if (map[h][row][column].height!=false) {
                let hexClass = '';
                switch (map[h][row][column].terrain) {
                  case 1: hexClass = 'hexField'; break;
                  case 2: hexClass = 'hexSand'; break;
                  default: hexClass = 'hexField';
                }
                createSVG('polygon').attr({
                  points: [
                    toPoint(p[1].x, p[1].y - map[h][row][column].height[0]),
                    toPoint(p[2].x, p[2].y - map[h][row][column].height[1]),
                    toPoint(p[3].x, p[3].y - map[h][row][column].height[2]),
                    toPoint(p[4].x, p[4].y - map[h][row][column].height[3]),
                    toPoint(p[5].x, p[5].y - map[h][row][column].height[4]),
                    toPoint(p[6].x, p[6].y - map[h][row][column].height[5])
                  ].join(' '),
                  'class':hexClass,
                  tabindex:1
                }).attr({'id': 'hexC'+column+'R'+row}).click(function () {
                  console.log('clicked! ' + this.id);
                })
                .appendTo(theTile).data({center:center, column:column, row:row}).on('click', hexClick).attr({'hex-column': column, 'hex-row': row});
              }

              // ╞═ Water Tile ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╡
              if (map[h][row][column].water===true) {
                if (map[h][row][column].waterHeight===undefined) map[h][row][column].waterHeight = -5; // default height for all the water tiles if it has not been preset

                createSVG('polygon').attr({
                  points: [
                    toPoint(p[1].x, p[1].y - map[h][row][column].waterHeight),
                    toPoint(p[2].x, p[2].y - map[h][row][column].waterHeight),
                    toPoint(p[3].x, p[3].y - map[h][row][column].waterHeight),
                    toPoint(p[4].x, p[4].y - map[h][row][column].waterHeight),
                    toPoint(p[5].x, p[5].y - map[h][row][column].waterHeight),
                    toPoint(p[6].x, p[6].y - map[h][row][column].waterHeight)
                  ].join(' '),
                  'class':'hexWater',
                  tabindex:1
                })
                .attr({ 'id': 'hexC'+column+'R'+row, 'hex-column': column, 'hex-row': row })
                .appendTo(theTile)
                .data({center:center, column:column, row:row})
                .on('click', hexClick)
                .click(function () {
                  console.log('clicked!');
                  console.log(this);
                });

                // *** Water Tile edges
                if (isEdge===true) {
                  createSVG('polygon').attr({
                    points: [
                      toPoint(p[1].x, p[1].y - map[h][row][column].waterHeight),
                      toPoint(p[1].x, p[1].y - map[h][row][column].height[0]),
                      toPoint(p[6].x, p[6].y - map[h][row][column].height[5]),
                      toPoint(p[6].x, p[6].y - map[h][row][column].waterHeight)
                    ].join(' '),'class':'hexWater', tabindex:-1
                  })
                  .attr({'id': 'hexCliffR'+row+'C'+column })
                  .appendTo(theTile).data({center:center});

                  createSVG('polygon').attr({
                    points: [
                      toPoint(p[6].x, p[6].y - map[h][row][column].waterHeight),
                      toPoint(p[6].x, p[6].y - map[h][row][column].height[5]),
                      toPoint(p[5].x, p[5].y - map[h][row][column].height[4]),
                      toPoint(p[5].x, p[5].y - map[h][row][column].waterHeight),
                    ].join(' '),'class':'hexWater', tabindex: -1
                  })
                  .attr({ 'id': 'hexCliffR'+row+'C'+column })
                  .appendTo(theTile).data({center:center});

                  createSVG('polygon').attr({
                    points: [
                      toPoint(p[5].x, p[5].y - map[h][row][column].waterHeight),
                      toPoint(p[5].x, p[5].y - map[h][row][column].height[4]),
                      toPoint(p[4].x, p[4].y - map[h][row][column].height[3]),
                      toPoint(p[4].x, p[4].y - map[h][row][column].waterHeight),
                    ].join(' '),'class': 'hexWater', tabindex: -1
                  })
                  .attr({ 'id': 'hexCliffR'+row+'C'+column })
                  .appendTo(theTile).data({center:center});
                }
              }



              // ╞═ Hex Based objects. Rocks, trees ext ══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╡
              center = { x: (width * 1.5 * column) + ((row%2==0)?width*0.75:0), y: 0.5 * height * row };
              center = cartesianToIsometric(center);
              center.x = center.x + offsetwidth;

              if (map[h][row][column].objs!==undefined) {
                for (i=0; i<map[h][row][column].objs.length; i++) {
                  if (map[h][row][column].objs[i].type == 'tree') {

                    createSVG('g').attr({
                      id: 'hexObj_I'+i+'C'+column+'R'+row,
                      transform: "translate(" + (center.x - 35) +"," + (center.y - 78) + ")"
                    }).click(function () {
                      console.log('clicked a tree!');
                      console.log(this);
                    }).appendTo(svgParent).data({center:center});
                    document.getElementById('hexObj_I'+i+'C'+column+'R'+row).innerHTML = objs.tree.svg;
                  }
                }
              }




                center = Point(map[h][row][column].start.x, map[h][row][column].start.y);
                // looking for tiles that do not yet exist ... shit.
                // *** Floor based object, they are above the base terrain but below most other objects. these are roads, paths, building floors...
                if (column<(columns) && row<(rows-1) && ((row-1)%4)==0 && row>3 && column>1) {
                  isoCol = Math.floor(column);
                  isoRow = Math.floor((row-1)/4)+1;

                  // grid points.
                  //createSVG('circle').attr({ r: 1, cx: center.x, cy: center.y }).appendTo(svgParent).data({center:center});
                  // the grid
                  createSVG('polygon').attr({
                    points: [
                      toPoint(map[h][row + 0][column + 0].start.x - center.x, map[h][row + 0][column + 0].start.y - center.y),
                      toPoint(map[h][row + 0][column - 1].start.x - center.x, map[h][row + 0][column - 1].start.y - center.y),
                      toPoint(map[h][row - 4][column - 1].start.x - center.x, map[h][row - 4][column - 1].start.y - center.y),
                      toPoint(map[h][row - 4][column + 0].start.x - center.x, map[h][row - 4][column + 0].start.y - center.y)
                    ].join(' '),'class':'isoBase', tabindex:-1
                  }).attr({'id': 'hexC'+column+'R'+row}).appendTo(svgParent).data({center:center});


                  if (isoMap[isoRow][isoCol].floor==1) {
                    i=1;
                    createSVG('polygon').attr({
                      points: [
                        toPoint(map[h][row + 0][column + 0].start.x - center.x, map[h][row + 0][column + 0].start.y - center.y),
                        toPoint(map[h][row + 0][column - 1].start.x - center.x, map[h][row + 0][column - 1].start.y - center.y),
                        toPoint(map[h][row - 4][column - 1].start.x - center.x, map[h][row - 4][column - 1].start.y - center.y),
                        toPoint(map[h][row - 4][column + 0].start.x - center.x, map[h][row - 4][column + 0].start.y - center.y)
                      ].join(' '),'class':'isoFloor01', tabindex:-1
                    }).attr({'id': 'hexFloor_I'+i+'C'+column+'R'+row}).appendTo(svgParent).data({center:center});

                    //document.getElementById('hexObj_I'+i+'C'+column+'R'+row).innerHTML = objs.tree.svg;

                  }

                  if (isoMap[isoRow][isoCol].floor==2) {
                    i=1;

                    createSVG('polygon').attr({
                      points: [
                        toPoint(map[h][row + 0][column + 0].start.x - center.x, map[h][row + 0][column + 0].start.y - center.y),
                        toPoint(map[h][row + 0][column - 1].start.x - center.x, map[h][row + 0][column - 1].start.y - center.y),
                        toPoint(map[h][row - 4][column - 1].start.x - center.x, map[h][row - 4][column - 1].start.y - center.y),
                        toPoint(map[h][row - 4][column + 0].start.x - center.x, map[h][row - 4][column + 0].start.y - center.y)
                      ].join(' '),'class':'isoFloor02', tabindex:-1
                    }).attr({'id': 'hexFloor_I'+i+'C'+column+'R'+row}).appendTo(svgParent).data({center:center});
                  }

                  if (isoMap[isoRow][isoCol].floor==3) {
                    i=1;
                    createSVG('polygon').attr({
                      points: [
                        toPoint(map[h][row + 0][column + 0].start.x - center.x, map[h][row + 0][column + 0].start.y - center.y),
                        toPoint(map[h][row + 0][column - 1].start.x - center.x, map[h][row + 0][column - 1].start.y - center.y),
                        toPoint(map[h][row - 4][column - 1].start.x - center.x, map[h][row - 4][column - 1].start.y - center.y),
                        toPoint(map[h][row - 4][column + 0].start.x - center.x, map[h][row - 4][column + 0].start.y - center.y)
                      ].join(' '),'class':'isoFloor03', tabindex:-1
                    }).attr({'id': 'hexFloor_I'+i+'C'+column+'R'+row}).appendTo(svgParent).data({center:center});
                  }

                  if (isoMap[isoRow][isoCol].floor==4) {
                    i=1;
                    createSVG('polygon').attr({
                      points: [
                        toPoint(map[h][row + 0][column + 0].start.x - center.x, map[h][row + 0][column + 0].start.y - center.y),
                        toPoint(map[h][row + 0][column - 1].start.x - center.x, map[h][row + 0][column - 1].start.y - center.y),
                        toPoint(map[h][row - 4][column - 1].start.x - center.x, map[h][row - 4][column - 1].start.y - center.y),
                        toPoint(map[h][row - 4][column + 0].start.x - center.x, map[h][row - 4][column + 0].start.y - center.y)
                      ].join(' '),'class':'isoFloor04', tabindex:-1
                    }).attr({
                      'id': 'hexFloor_I'+i+'C'+column+'R'+row
                    }).appendTo(svgParent).data({center:center});
                  }
                }





            }
          }
        }
      }
    }


  var endTime = (new Date()).getTime();
  console.log('Render Complete');
  console.log('Finished in ' + (endTime - startTime) + ' ms');
	});
};

function controlUP() {
  controlY -= 10;
  svgRender.setAttribute("viewBox", controlX + ' ' + controlY + ' ' + controlZ + ' ' + controlZ);
}

function controlDOWN() {
  controlY += 10;
  svgRender.setAttribute("viewBox", controlX + ' ' + controlY + ' ' + controlZ + ' ' + controlZ);
}

function controlLEFT() {
  controlX -= 10;
  svgRender.setAttribute("viewBox", controlX + ' ' + controlY + ' ' + controlZ + ' ' + controlZ);
}

function controlRIGHT() {
  controlX += 10;
  svgRender.setAttribute("viewBox", controlX + ' ' + controlY + ' ' + controlZ + ' ' + controlZ);
}


function controlZoomIN() {
  controlZ -= 25;
  svgRender.setAttribute("viewBox", controlX + ' ' + controlY + ' ' + controlZ + ' ' + controlZ);
}

function controlZoomOUT() {
  controlZ += 25;
  svgRender.setAttribute("viewBox", controlX + ' ' + controlY + ' ' + controlZ + ' ' + controlZ);
}

function cartesianToIsometric(cartPt) {
  var tempPt = new Point();
  tempPt.x = cartPt.x - cartPt.y;
  tempPt.y = (cartPt.x + cartPt.y) / 2;
  return (tempPt);
}

function isometricToCartesian(isoPt) {
  var tempPt = new Point();
  tempPt.x = (2 * isoPt.y + isoPt.x) * 0.5;
  tempPt.y = (2 * isoPt.y - isoPt.x) * 0.5;
  return (tempPt);
}

//float cartesianX = (2.0f * isometricY + isometricX) * 0.5f;
//float cartesianY = (2.0f * isometricY - isometricX) * 0.5f;

function getAngle(cx, cy, ex, ey) {
  var dy = ey - cy;
  var dx = ex - cx;
  var theta = Math.atan2(dy, dx); // range (-PI, PI]
  theta *= 180 / Math.PI; // rads to degs, range (-180, 180]
  return theta;
}


function hexCorner(hexCenter, hexSize, hexPNum) { // hexOffset,
  var tempPt = new Point();
  var angle_deg = 60 * hexPNum - 30;
  var angle_rad = Math.PI / 180 * angle_deg;
  
  tempPt.x = hexCenter.x + hexSize * Math.cos(angle_rad); // hexOffset.x +
  tempPt.y = hexCenter.y + hexSize * Math.sin(angle_rad); // hexOffset.y +
  
  return tempPt;
}